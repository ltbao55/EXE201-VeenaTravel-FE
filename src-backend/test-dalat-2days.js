import axios from 'axios';

const testDalat2Days = async () => {
  try {
    console.log('üß™ Testing: ƒê√† L·∫°t 2 ng√†y - Ki·ªÉm tra t√≠nh h·ª£p l√Ω l·ªãch tr√¨nh\n');
    
    const response = await axios.post('http://localhost:5001/api/chat/message', {
      message: 'T√¥i mu·ªën ƒëi ƒê√† L·∫°t 2 ng√†y, th√≠ch thi√™n nhi√™n v√† ·∫©m th·ª±c, ƒëi c√πng ng∆∞·ªùi y√™u',
      userId: 'test-dalat-' + Date.now()
    });

    if (response.data.success && response.data.data.itinerary) {
      const itinerary = response.data.data.itinerary;
      
      console.log('‚úÖ L·ªãch tr√¨nh ƒë√£ ƒë∆∞·ª£c t·∫°o\n');
      console.log('=' .repeat(80));
      console.log(`üìç ${itinerary.title}`);
      console.log('='.repeat(80));
      console.log(`üéØ ƒêi·ªÉm ƒë·∫øn: ${itinerary.destination}`);
      console.log(`üìÖ Th·ªùi gian: ${itinerary.duration} ng√†y`);
      console.log(`üí∞ T·ªïng ng√¢n s√°ch: ${itinerary.totalBudget}`);
      console.log(`üìä RAG Context: ${itinerary.ragContext ? 'C√≥' : 'Kh√¥ng'}\n`);
      
      // Ph√¢n t√≠ch t·ª´ng ng√†y
      itinerary.days.forEach(day => {
        console.log('\n' + '='.repeat(80));
        console.log(`üìÜ NG√ÄY ${day.day}: ${day.title}`);
        console.log('='.repeat(80));
        
        let previousTime = null;
        let mealCount = 0;
        let restCount = 0;
        
        day.activities.forEach((activity, idx) => {
          const time = activity.time;
          const location = activity.location || activity.activity;
          const duration = activity.duration;
          const cost = activity.estimatedCost || '0 VNƒê';
          const description = activity.description || '';
          
          console.log(`\n${idx + 1}. ‚è∞ ${time} - ${activity.activity}`);
          console.log(`   üìç ${location}`);
          console.log(`   üìù ${description}`);
          console.log(`   ‚è±Ô∏è  Th·ªùi gian: ${duration}`);
          console.log(`   üíµ Chi ph√≠: ${cost}`);
          
          // Ki·ªÉm tra b·ªØa ƒÉn
          const isMeal = activity.activity.toLowerCase().includes('ƒÉn') || 
                        activity.activity.toLowerCase().includes('nh√† h√†ng') ||
                        activity.activity.toLowerCase().includes('qu√°n') ||
                        location.toLowerCase().includes('nh√† h√†ng') ||
                        location.toLowerCase().includes('qu√°n');
          
          if (isMeal) {
            mealCount++;
            console.log(`   üçΩÔ∏è  [B·ªÆA ƒÇN]`);
          }
          
          // Ki·ªÉm tra ngh·ªâ ng∆°i
          const isRest = activity.activity.toLowerCase().includes('ngh·ªâ') ||
                        activity.activity.toLowerCase().includes('check-in') ||
                        activity.activity.toLowerCase().includes('kh√°ch s·∫°n');
          
          if (isRest) {
            restCount++;
            console.log(`   üí§ [NGH·ªà NG∆†I]`);
          }
          
          // T√≠nh kho·∫£ng c√°ch th·ªùi gian
          if (previousTime) {
            const [prevHour, prevMin] = previousTime.split(':').map(Number);
            const [currHour, currMin] = time.split(':').map(Number);
            const gap = (currHour * 60 + currMin) - (prevHour * 60 + prevMin);
            
            if (gap > 0) {
              console.log(`   ‚è≠Ô∏è  Kho·∫£ng c√°ch: ${gap} ph√∫t t·ª´ ho·∫°t ƒë·ªông tr∆∞·ªõc`);
            }
          }
          
          previousTime = time;
        });
        
        // Th·ªëng k√™ ng√†y
        console.log('\n' + '-'.repeat(80));
        console.log(`üìä TH·ªêNG K√ä NG√ÄY ${day.day}:`);
        console.log(`   - T·ªïng ho·∫°t ƒë·ªông: ${day.activities.length}`);
        console.log(`   - B·ªØa ƒÉn: ${mealCount} üçΩÔ∏è`);
        console.log(`   - Ngh·ªâ ng∆°i: ${restCount} üí§`);
        console.log(`   - B·∫Øt ƒë·∫ßu: ${day.activities[0]?.time}`);
        console.log(`   - K·∫øt th√∫c: ${day.activities[day.activities.length - 1]?.time}`);
        
        // ƒê√°nh gi√°
        console.log('\nüìã ƒê√ÅNH GI√Å:');
        
        // Check s·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông
        if (day.activities.length >= 4 && day.activities.length <= 6) {
          console.log(`   ‚úÖ S·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông h·ª£p l√Ω (${day.activities.length} ho·∫°t ƒë·ªông)`);
        } else if (day.activities.length < 4) {
          console.log(`   ‚ö†Ô∏è  √çt ho·∫°t ƒë·ªông (${day.activities.length} ho·∫°t ƒë·ªông)`);
        } else {
          console.log(`   ‚ö†Ô∏è  Nhi·ªÅu ho·∫°t ƒë·ªông (${day.activities.length} ho·∫°t ƒë·ªông)`);
        }
        
        // Check b·ªØa ƒÉn
        if (mealCount >= 2) {
          console.log(`   ‚úÖ C√≥ ƒë·ªß b·ªØa ƒÉn (${mealCount} b·ªØa)`);
        } else {
          console.log(`   ‚ö†Ô∏è  Thi·∫øu b·ªØa ƒÉn (ch·ªâ ${mealCount} b·ªØa)`);
        }
        
        // Check th·ªùi gian
        const startTime = day.activities[0]?.time;
        const [startHour] = startTime.split(':').map(Number);
        
        if (startHour >= 7 && startHour <= 9) {
          console.log(`   ‚úÖ Th·ªùi gian b·∫Øt ƒë·∫ßu h·ª£p l√Ω (${startTime})`);
        } else {
          console.log(`   ‚ö†Ô∏è  Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng t·ªëi ∆∞u (${startTime})`);
        }
      });
      
      // T·ªïng k·∫øt
      console.log('\n' + '='.repeat(80));
      console.log('üìä T·ªîNG K·∫æT L·ªäCH TR√åNH');
      console.log('='.repeat(80));
      
      const totalActivities = itinerary.days.reduce((sum, day) => sum + day.activities.length, 0);
      const avgActivities = (totalActivities / itinerary.days.length).toFixed(1);
      
      console.log(`\nüìà Th·ªëng k√™ t·ªïng quan:`);
      console.log(`   - T·ªïng s·ªë ho·∫°t ƒë·ªông: ${totalActivities}`);
      console.log(`   - Trung b√¨nh/ng√†y: ${avgActivities} ho·∫°t ƒë·ªông`);
      console.log(`   - C√≥ RAG context: ${itinerary.ragContext ? 'C√≥ ‚úÖ' : 'Kh√¥ng ‚ùå'}`);
      
      console.log(`\nüí° Tips t·ª´ AI:`);
      itinerary.tips?.forEach((tip, idx) => {
        console.log(`   ${idx + 1}. ${tip}`);
      });
      
      if (itinerary.budgetBreakdown) {
        console.log(`\nüí∞ Ph√¢n b·ªï ng√¢n s√°ch:`);
        Object.entries(itinerary.budgetBreakdown).forEach(([key, value]) => {
          const label = {
            'accommodation': 'L∆∞u tr√∫',
            'food': 'ƒÇn u·ªëng',
            'transportation': 'Di chuy·ªÉn',
            'activities': 'Ho·∫°t ƒë·ªông',
            'others': 'Kh√°c'
          }[key] || key;
          console.log(`   - ${label}: ${value}`);
        });
      }
      
      // ƒê√°nh gi√° t·ªïng th·ªÉ
      console.log('\n' + '='.repeat(80));
      console.log('üéØ ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ');
      console.log('='.repeat(80));
      
      const issues = [];
      const strengths = [];
      
      // Check activities per day
      if (avgActivities >= 4 && avgActivities <= 6) {
        strengths.push('‚úÖ S·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông m·ªói ng√†y h·ª£p l√Ω (4-6)');
      } else {
        issues.push(`‚ö†Ô∏è  S·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông kh√¥ng t·ªëi ∆∞u (${avgActivities}/ng√†y)`);
      }
      
      // Check RAG
      if (itinerary.ragContext) {
        strengths.push('‚úÖ S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ database (RAG)');
      }
      
      // Check c√≥ location data kh√¥ng
      const hasLocationData = response.data.data.locations && response.data.data.locations.length > 0;
      if (hasLocationData) {
        strengths.push(`‚úÖ C√≥ ${response.data.data.locations.length} ƒë·ªãa ƒëi·ªÉm v·ªõi t·ªça ƒë·ªô & photos`);
      }
      
      console.log('\nüí™ ƒêi·ªÉm m·∫°nh:');
      strengths.forEach(s => console.log(`   ${s}`));
      
      if (issues.length > 0) {
        console.log('\n‚ö†Ô∏è  C·∫ßn c·∫£i thi·ªán:');
        issues.forEach(i => console.log(`   ${i}`));
      }
      
      console.log('\n' + '='.repeat(80));
      console.log('üéâ Test ho√†n t·∫•t!');
      console.log('='.repeat(80));
      
    } else {
      console.log('‚ùå Kh√¥ng th·ªÉ t·∫°o l·ªãch tr√¨nh');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  }
};

testDalat2Days();

