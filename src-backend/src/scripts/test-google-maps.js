import dotenv from 'dotenv';
import googleMapsService from '../services/googlemaps-service.js';

// Load environment variables
dotenv.config();

/**
 * Test Google Maps API connection and functionality
 */
async function testGoogleMapsAPI() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test Google Maps API...\n');
  
  // Test 1: Geocoding - L·∫•y t·ªça ƒë·ªô t·ª´ ƒë·ªãa ch·ªâ
  console.log('üìç Test 1: Geocoding (ƒê·ªãa ch·ªâ ‚Üí T·ªça ƒë·ªô)');
  try {
    const geocodeResult = await googleMapsService.getCoordinates('Ch·ª£ B·∫øn Th√†nh, H·ªì Ch√≠ Minh');
    if (geocodeResult.success) {
      console.log('‚úÖ Geocoding th√†nh c√¥ng!');
      console.log(`   ƒê·ªãa ch·ªâ: ${geocodeResult.data.formatted_address}`);
      console.log(`   T·ªça ƒë·ªô: ${geocodeResult.data.lat}, ${geocodeResult.data.lng}`);
      console.log(`   Place ID: ${geocodeResult.data.place_id}\n`);
    } else {
      console.log('‚ùå Geocoding th·∫•t b·∫°i:', geocodeResult.message);
    }
  } catch (error) {
    console.log('‚ùå L·ªói Geocoding:', error.message);
  }

  // Test 2: Reverse Geocoding - L·∫•y ƒë·ªãa ch·ªâ t·ª´ t·ªça ƒë·ªô
  console.log('üìç Test 2: Reverse Geocoding (T·ªça ƒë·ªô ‚Üí ƒê·ªãa ch·ªâ)');
  try {
    const reverseResult = await googleMapsService.getAddress(10.762622, 106.660172);
    if (reverseResult.success) {
      console.log('‚úÖ Reverse Geocoding th√†nh c√¥ng!');
      console.log(`   ƒê·ªãa ch·ªâ: ${reverseResult.data}\n`);
    } else {
      console.log('‚ùå Reverse Geocoding th·∫•t b·∫°i:', reverseResult.message);
    }
  } catch (error) {
    console.log('‚ùå L·ªói Reverse Geocoding:', error.message);
  }

  // Test 3: Nearby Search - T√¨m ƒë·ªãa ƒëi·ªÉm g·∫ßn ƒë√¢y
  console.log('üìç Test 3: Nearby Search (T√¨m ƒë·ªãa ƒëi·ªÉm g·∫ßn ƒë√¢y)');
  try {
    const nearbyResult = await googleMapsService.searchNearbyPlaces(
      { lat: 10.762622, lng: 106.660172 }, // Ch·ª£ B·∫øn Th√†nh
      'tourist_attraction',
      2000
    );
    if (nearbyResult.success) {
      console.log('‚úÖ Nearby Search th√†nh c√¥ng!');
      console.log(`   T√¨m th·∫•y ${nearbyResult.data.length} ƒë·ªãa ƒëi·ªÉm:`);
      nearbyResult.data.slice(0, 3).forEach((place, index) => {
        console.log(`   ${index + 1}. ${place.name} - Rating: ${place.rating || 'N/A'}`);
      });
      console.log('');
    } else {
      console.log('‚ùå Nearby Search th·∫•t b·∫°i:', nearbyResult.message);
    }
  } catch (error) {
    console.log('‚ùå L·ªói Nearby Search:', error.message);
  }

  // Test 4: Place Details - L·∫•y chi ti·∫øt ƒë·ªãa ƒëi·ªÉm
  console.log('üìç Test 4: Place Details (Chi ti·∫øt ƒë·ªãa ƒëi·ªÉm)');
  try {
    // S·ª≠ d·ª•ng Place ID c·ªßa Ch·ª£ B·∫øn Th√†nh
    const detailsResult = await googleMapsService.getPlaceDetails('ChIJhWF_vVcvdTERKD3kfm8wGAE');
    if (detailsResult.success) {
      console.log('‚úÖ Place Details th√†nh c√¥ng!');
      console.log(`   T√™n: ${detailsResult.data.name}`);
      console.log(`   ƒê·ªãa ch·ªâ: ${detailsResult.data.formatted_address}`);
      console.log(`   Rating: ${detailsResult.data.rating || 'N/A'}`);
      console.log(`   S·ªë ƒëi·ªán tho·∫°i: ${detailsResult.data.formatted_phone_number || 'N/A'}`);
      console.log('');
    } else {
      console.log('‚ùå Place Details th·∫•t b·∫°i:', detailsResult.message);
    }
  } catch (error) {
    console.log('‚ùå L·ªói Place Details:', error.message);
  }

  // Test 5: Distance Matrix - T√≠nh kho·∫£ng c√°ch
  console.log('üìç Test 5: Distance Matrix (T√≠nh kho·∫£ng c√°ch)');
  try {
    const distanceResult = await googleMapsService.getDistanceMatrix(
      ['Ch·ª£ B·∫øn Th√†nh, H·ªì Ch√≠ Minh'],
      ['Nh√† Th·ªù ƒê·ª©c B√†, H·ªì Ch√≠ Minh'],
      'walking'
    );
    if (distanceResult.success) {
      console.log('‚úÖ Distance Matrix th√†nh c√¥ng!');
      const element = distanceResult.data.rows[0].elements[0];
      if (element.status === 'OK') {
        console.log(`   Kho·∫£ng c√°ch: ${element.distance.text}`);
        console.log(`   Th·ªùi gian: ${element.duration.text}`);
      }
      console.log('');
    } else {
      console.log('‚ùå Distance Matrix th·∫•t b·∫°i:', distanceResult.message);
    }
  } catch (error) {
    console.log('‚ùå L·ªói Distance Matrix:', error.message);
  }

  // Test 6: Directions - T√¨m ƒë∆∞·ªùng ƒëi
  console.log('üìç Test 6: Directions (T√¨m ƒë∆∞·ªùng ƒëi)');
  try {
    const directionsResult = await googleMapsService.getDirections(
      'Ch·ª£ B·∫øn Th√†nh, H·ªì Ch√≠ Minh',
      'Nh√† Th·ªù ƒê·ª©c B√†, H·ªì Ch√≠ Minh',
      'walking'
    );
    if (directionsResult.success) {
      console.log('‚úÖ Directions th√†nh c√¥ng!');
      const route = directionsResult.data.routes[0];
      console.log(`   T·ªïng kho·∫£ng c√°ch: ${route.legs[0].distance.text}`);
      console.log(`   T·ªïng th·ªùi gian: ${route.legs[0].duration.text}`);
      console.log(`   S·ªë b∆∞·ªõc: ${route.legs[0].steps.length} b∆∞·ªõc`);
      console.log('');
    } else {
      console.log('‚ùå Directions th·∫•t b·∫°i:', directionsResult.message);
    }
  } catch (error) {
    console.log('‚ùå L·ªói Directions:', error.message);
  }

  console.log('üéâ Ho√†n th√†nh test Google Maps API!');
}

// Ch·∫°y test
testGoogleMapsAPI().catch(console.error);
