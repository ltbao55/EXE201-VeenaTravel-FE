import express from 'express';
import integratedSearchService from '../services/integrated-search-service.js';

const router = express.Router();

/**
 * @route POST /api/integrated-search/places
 * @desc T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm t√≠ch h·ª£p Pinecone + Google Maps
 * @access Public
 */
router.post('/places', async (req, res) => {
  try {
    const { query, limit = 5, category } = req.body;
    
    if (!query || typeof query !== 'string') {
      return res.status(400).json({
        success: false,
        message: 'Query t√¨m ki·∫øm l√† b·∫Øt bu·ªôc'
      });
    }
    
    console.log(`üîç API Request: T√¨m ki·∫øm "${query}"`);
    
    const result = await integratedSearchService.searchPlacesWithGoogleMaps(query, {
      limit: Math.min(limit, 10), // Gi·ªõi h·∫°n t·ªëi ƒëa 10 k·∫øt qu·∫£
      filter: category ? { category: { $eq: category } } : null
    });
    
    if (result.success) {
      res.json({
        success: true,
        data: result.data,
        message: `T√¨m th·∫•y ${result.data.results.length} ƒë·ªãa ƒëi·ªÉm`
      });
    } else {
      res.status(404).json({
        success: false,
        message: result.message
      });
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói API integrated search:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi t√¨m ki·∫øm'
    });
  }
});

/**
 * @route POST /api/integrated-search/category
 * @desc T√¨m ki·∫øm theo category v·ªõi enrichment
 * @access Public
 */
router.post('/category', async (req, res) => {
  try {
    const { query, category } = req.body;
    
    if (!query || !category) {
      return res.status(400).json({
        success: false,
        message: 'Query v√† category l√† b·∫Øt bu·ªôc'
      });
    }
    
    console.log(`üîç API Request: T√¨m ki·∫øm "${query}" trong category "${category}"`);
    
    const result = await integratedSearchService.searchByCategory(query, category);
    
    if (result.success) {
      res.json({
        success: true,
        data: result.data,
        message: `T√¨m th·∫•y ${result.data.results.length} ƒë·ªãa ƒëi·ªÉm trong category ${category}`
      });
    } else {
      res.status(404).json({
        success: false,
        message: result.message
      });
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói API category search:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi t√¨m ki·∫øm theo category'
    });
  }
});

/**
 * @route POST /api/integrated-search/near
 * @desc T√¨m ki·∫øm g·∫ßn location v·ªõi enrichment
 * @access Public
 */
router.post('/near', async (req, res) => {
  try {
    const { query, location, radius = 10 } = req.body;
    
    if (!query || !location || typeof location.lat !== 'number' || typeof location.lng !== 'number') {
      return res.status(400).json({
        success: false,
        message: 'Query v√† location (lat, lng) l√† b·∫Øt bu·ªôc'
      });
    }
    
    console.log(`üîç API Request: T√¨m ki·∫øm "${query}" g·∫ßn ${location.lat}, ${location.lng}`);
    
    const result = await integratedSearchService.searchNearLocation(query, location, radius);
    
    if (result.success) {
      res.json({
        success: true,
        data: result.data,
        message: `T√¨m th·∫•y ${result.data.results.length} ƒë·ªãa ƒëi·ªÉm trong b√°n k√≠nh ${radius}km`
      });
    } else {
      res.status(404).json({
        success: false,
        message: result.message
      });
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói API near location search:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi t√¨m ki·∫øm g·∫ßn location'
    });
  }
});

/**
 * @route GET /api/integrated-search/demo
 * @desc Demo endpoint v·ªõi c√°c query m·∫´u
 * @access Public
 */
router.get('/demo', async (req, res) => {
  try {
    const demoQueries = [
      'kh√°ch s·∫°n g·∫ßn bi·ªÉn',
      'nh√† h√†ng h·∫£i s·∫£n',
      'ƒëi·ªÉm tham quan l·ªãch s·ª≠'
    ];
    
    const results = [];
    
    for (const query of demoQueries) {
      try {
        const result = await integratedSearchService.searchPlacesWithGoogleMaps(query, { limit: 2 });
        results.push({
          query,
          success: result.success,
          count: result.success ? result.data.results.length : 0,
          enrichment_rate: result.success ? result.data.search_metadata.enrichment_rate : 0,
          sample_result: result.success && result.data.results.length > 0 ? {
            name: result.data.results[0].pinecone_data.name,
            score: result.data.results[0].score,
            has_google_data: result.data.results[0].enrichment_status === 'success'
          } : null
        });
        
        // Delay ƒë·ªÉ tr√°nh rate limit
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        results.push({
          query,
          success: false,
          error: error.message
        });
      }
    }
    
    res.json({
      success: true,
      data: {
        demo_results: results,
        total_queries: demoQueries.length,
        successful_queries: results.filter(r => r.success).length,
        timestamp: new Date().toISOString()
      },
      message: 'Demo t√≠ch h·ª£p Pinecone + Google Maps API'
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói API demo:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi ch·∫°y demo'
    });
  }
});

/**
 * @route GET /api/integrated-search/health
 * @desc Health check cho integrated search service
 * @access Public
 */
router.get('/health', async (req, res) => {
  try {
    // Test k·∫øt n·ªëi Pinecone
    const pineconeTest = await integratedSearchService.searchPlacesWithGoogleMaps('test', { limit: 1 });
    
    res.json({
      success: true,
      data: {
        pinecone_status: pineconeTest.success ? 'connected' : 'error',
        google_maps_status: process.env.GOOGLE_MAPS_API_KEY ? 'configured' : 'missing',
        service_status: 'healthy',
        timestamp: new Date().toISOString()
      },
      message: 'Integrated search service health check'
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói health check:', error);
    res.status(500).json({
      success: false,
      message: 'Service kh√¥ng kh·ªèe m·∫°nh',
      error: error.message
    });
  }
});

export default router;
