import pineconeService from './pinecone-service.js';
import googleMapsService from './googlemaps-service.js';

/**
 * Service t√≠ch h·ª£p Pinecone semantic search v·ªõi Google Maps API
 * K·∫øt h·ª£p t√¨m ki·∫øm ng·ªØ nghƒ©a v·ªõi th√¥ng tin chi ti·∫øt t·ª´ Google Maps
 */

/**
 * T√¨m ƒë·ªãa ƒëi·ªÉm b·∫±ng semantic search v√† enrichment v·ªõi Google Maps data
 * @param {string} query - C√¢u truy v·∫•n t√¨m ki·∫øm
 * @param {Object} options - T√πy ch·ªçn t√¨m ki·∫øm
 * @returns {Promise<{success: boolean, data?: Object, message?: string}>}
 */
export const searchPlacesWithGoogleMaps = async (query, options = {}) => {
  try {
    console.log(`üîç T√¨m ki·∫øm t√≠ch h·ª£p: "${query}"`);
    
    // 1. T√¨m ki·∫øm semantic trong Pinecone
    console.log('üìä B∆∞·ªõc 1: Semantic search trong Pinecone...');
    const pineconeResult = await pineconeService.semanticSearch(query, {
      limit: options.limit || 5,
      filter: options.filter
    });
    
    if (!pineconeResult.success || !pineconeResult.data.results.length) {
      return {
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm ph√π h·ª£p trong database'
      };
    }
    
    console.log(`‚úÖ T√¨m th·∫•y ${pineconeResult.data.results.length} ƒë·ªãa ƒëi·ªÉm t·ª´ Pinecone`);
    
    // 2. Enrichment v·ªõi Google Maps data
    console.log('üó∫Ô∏è B∆∞·ªõc 2: Enrichment v·ªõi Google Maps API...');
    const enrichedResults = [];
    
    for (const place of pineconeResult.data.results) {
      try {
        const enrichedPlace = {
          // D·ªØ li·ªáu t·ª´ Pinecone
          id: place.id,
          score: place.score,
          pinecone_data: {
            name: place.metadata.name,
            description: place.metadata.description,
            category: place.metadata.category,
            tags: place.metadata.tags,
            address: place.metadata.address,
            rating: place.metadata.rating,
            coordinates: {
              lat: place.metadata.latitude,
              lng: place.metadata.longitude
            }
          },
          // Placeholder cho Google Maps data
          google_maps_data: null,
          enrichment_status: 'pending'
        };
        
        // T√¨m ki·∫øm tr√™n Google Maps b·∫±ng t·ªça ƒë·ªô (ch√≠nh x√°c h∆°n)
        const placeCoordinates = {
          lat: place.metadata.latitude,
          lng: place.metadata.longitude
        };

        console.log(`   - Searching coordinates: Lat ${placeCoordinates.lat}, Lng ${placeCoordinates.lng}`);

        // S·ª≠ d·ª•ng Nearby Search v·ªõi t·ªça ƒë·ªô ch√≠nh x√°c, b·ªè qua type ƒë·ªÉ t√¨m ki·∫øm r·ªông h∆°n
        const nearbyResult = await googleMapsService.searchNearbyPlaces(
          placeCoordinates,
          null, // B·ªè qua type ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c lo·∫°i ƒë·ªãa ƒëi·ªÉm
          250 // TƒÉng b√°n k√≠nh l√™n 250m
        );

        let googleMapsPlace = null;
        let searchMethod = '';

        if (nearbyResult.success && nearbyResult.data.length > 0) {
          // Ph∆∞∆°ng ph√°p 1: Nearby search th√†nh c√¥ng
          googleMapsPlace = nearbyResult.data[0];
          searchMethod = 'nearby_search';
          console.log(`   ‚úÖ Found via nearby search: ${googleMapsPlace.name}`);
        } else {
          // Ph∆∞∆°ng ph√°p 2: Fallback - Text search v·ªõi t√™n ƒë·ªãa ƒëi·ªÉm
          console.log(`   ‚ö†Ô∏è Nearby search failed, trying text search...`);
          const textSearchQuery = `${place.metadata.name} ${place.metadata.address}`;
          const geocodeResult = await googleMapsService.getCoordinates(textSearchQuery);

          if (geocodeResult.success && geocodeResult.data.place_id) {
            googleMapsPlace = {
              place_id: geocodeResult.data.place_id,
              name: place.metadata.name, // S·ª≠ d·ª•ng t√™n t·ª´ database
              geometry: {
                location: {
                  lat: geocodeResult.data.lat,
                  lng: geocodeResult.data.lng
                }
              }
            };
            searchMethod = 'text_search';
            console.log(`   ‚úÖ Found via text search: ${place.metadata.name}`);
          }
        }

        if (googleMapsPlace) {
          // L·∫•y chi ti·∫øt t·ª´ Google Maps
          const detailsResult = await googleMapsService.getPlaceDetails(googleMapsPlace.place_id);

          if (detailsResult.success) {
            const distanceFromOriginal = searchMethod === 'nearby_search' ?
              calculateDistance(
                place.metadata.latitude,
                place.metadata.longitude,
                googleMapsPlace.geometry.location.lat,
                googleMapsPlace.geometry.location.lng
              ) : null;

            enrichedPlace.google_maps_data = {
              place_id: googleMapsPlace.place_id,
              name: detailsResult.data.name,
              formatted_address: detailsResult.data.formatted_address,
              rating: detailsResult.data.rating,
              user_ratings_total: detailsResult.data.user_ratings_total,
              phone: detailsResult.data.formatted_phone_number,
              website: detailsResult.data.website,
              opening_hours: detailsResult.data.opening_hours,
              price_level: detailsResult.data.price_level,
              photos: detailsResult.data.photos ? detailsResult.data.photos.slice(0, 3).map(photo => ({
                photo_reference: photo.photo_reference,
                width: photo.width,
                height: photo.height,
                url: `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${photo.photo_reference}&key=${process.env.GOOGLE_MAPS_API_KEY}`
              })) : [],
              reviews: detailsResult.data.reviews ? detailsResult.data.reviews.slice(0, 3).map(review => ({
                author_name: review.author_name,
                rating: review.rating,
                text: review.text,
                time: review.time
              })) : [],
              types: detailsResult.data.types,
              geometry: detailsResult.data.geometry,
              search_method: searchMethod,
              distance_from_original: distanceFromOriginal
            };
            enrichedPlace.enrichment_status = 'success';

            const distanceInfo = distanceFromOriginal ? ` (distance: ${distanceFromOriginal.toFixed(0)}m)` : '';
            console.log(`‚úÖ Enriched: ${place.metadata.name} via ${searchMethod}${distanceInfo}`);
          } else {
            enrichedPlace.enrichment_status = 'failed_details';
            console.log(`‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt: ${place.metadata.name}`);
          }
        } else {
          enrichedPlace.enrichment_status = 'failed_all_methods';
          console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tr√™n Google Maps b·∫±ng c·∫£ 2 ph∆∞∆°ng ph√°p: ${place.metadata.name}`);
        }
        
        enrichedResults.push(enrichedPlace);
        
        // Delay ƒë·ªÉ tr√°nh rate limit
        await new Promise(resolve => setTimeout(resolve, 200));
        
      } catch (error) {
        console.error(`‚ùå L·ªói enrichment cho ${place.metadata.name}:`, error.message);
        enrichedResults.push({
          id: place.id,
          score: place.score,
          pinecone_data: place.metadata,
          google_maps_data: null,
          enrichment_status: 'error',
          error: error.message
        });
      }
    }
    
    // 3. Th·ªëng k√™ k·∫øt qu·∫£
    const stats = {
      total_found: enrichedResults.length,
      enriched_successfully: enrichedResults.filter(r => r.enrichment_status === 'success').length,
      enrichment_failed: enrichedResults.filter(r => r.enrichment_status.startsWith('failed')).length,
      enrichment_errors: enrichedResults.filter(r => r.enrichment_status === 'error').length
    };
    
    console.log(`üìä K·∫øt qu·∫£ enrichment: ${stats.enriched_successfully}/${stats.total_found} th√†nh c√¥ng`);
    
    return {
      success: true,
      data: {
        query,
        results: enrichedResults,
        stats,
        search_metadata: {
          pinecone_results: pineconeResult.data.results.length,
          enrichment_rate: Math.round((stats.enriched_successfully / stats.total_found) * 100),
          searched_at: new Date().toISOString()
        }
      }
    };
    
  } catch (error) {
    console.error('‚ùå L·ªói t√¨m ki·∫øm t√≠ch h·ª£p:', error);
    return {
      success: false,
      message: `L·ªói t√¨m ki·∫øm t√≠ch h·ª£p: ${error.message}`
    };
  }
};

/**
 * T√¨m ƒë·ªãa ƒëi·ªÉm theo category v·ªõi enrichment
 * @param {string} query - C√¢u truy v·∫•n
 * @param {string} category - Danh m·ª•c ƒë·ªãa ƒëi·ªÉm
 * @returns {Promise<{success: boolean, data?: Object, message?: string}>}
 */
export const searchByCategory = async (query, category) => {
  try {
    const filter = category ? { category: { $eq: category } } : null;
    
    return await searchPlacesWithGoogleMaps(query, {
      filter,
      limit: 8
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói t√¨m ki·∫øm theo category:', error);
    return {
      success: false,
      message: `L·ªói t√¨m ki·∫øm theo category: ${error.message}`
    };
  }
};

/**
 * T√¨m ƒë·ªãa ƒëi·ªÉm g·∫ßn t·ªça ƒë·ªô c·ª• th·ªÉ v·ªõi enrichment
 * @param {string} query - C√¢u truy v·∫•n
 * @param {Object} location - T·ªça ƒë·ªô {lat, lng}
 * @param {number} radiusKm - B√°n k√≠nh t√¨m ki·∫øm (km)
 * @returns {Promise<{success: boolean, data?: Object, message?: string}>}
 */
export const searchNearLocation = async (query, location, radiusKm = 10) => {
  try {
    // T√¨m ki·∫øm semantic tr∆∞·ªõc
    const searchResult = await searchPlacesWithGoogleMaps(query, { limit: 10 });
    
    if (!searchResult.success) {
      return searchResult;
    }
    
    // L·ªçc theo kho·∫£ng c√°ch
    const filteredResults = searchResult.data.results.filter(place => {
      const placeLat = place.pinecone_data.coordinates.lat;
      const placeLng = place.pinecone_data.coordinates.lng;
      
      // T√≠nh kho·∫£ng c√°ch ƒë∆°n gi·∫£n (Haversine)
      const distance = calculateDistance(location.lat, location.lng, placeLat, placeLng);
      place.distance_km = Math.round(distance * 100) / 100;
      
      return distance <= radiusKm;
    });
    
    // S·∫Øp x·∫øp theo kho·∫£ng c√°ch
    filteredResults.sort((a, b) => a.distance_km - b.distance_km);
    
    return {
      success: true,
      data: {
        ...searchResult.data,
        results: filteredResults,
        location_filter: {
          center: location,
          radius_km: radiusKm,
          found_in_radius: filteredResults.length
        }
      }
    };
    
  } catch (error) {
    console.error('‚ùå L·ªói t√¨m ki·∫øm g·∫ßn location:', error);
    return {
      success: false,
      message: `L·ªói t√¨m ki·∫øm g·∫ßn location: ${error.message}`
    };
  }
};

/**
 * Mapping category t·ª´ Pinecone sang Google Maps place type
 */
const getGoogleMapsType = (category) => {
  const categoryMapping = {
    'kh√°ch s·∫°n': 'lodging',
    'kh√°ch s·∫°n sang tr·ªçng': 'lodging',
    'khu ngh·ªâ d∆∞·ª°ng': 'lodging',
    'resort': 'lodging',
    'nh√† h√†ng': 'restaurant',
    'ph·ªë ·∫©m th·ª±c': 'restaurant',
    'ch·ª£ h·∫£i s·∫£n': 'restaurant',
    'qu√°n ƒÉn': 'restaurant',
    'ƒëi·ªÉm tham quan': 'tourist_attraction',
    'h·∫£i ƒëƒÉng': 'tourist_attraction',
    'khu du l·ªãch': 'tourist_attraction',
    'khu b·∫£o t·ªìn thi√™n nhi√™n': 'park',
    'c√¥ng vi√™n': 'park',
    'b√£i bi·ªÉn': 'natural_feature',
    'n√∫i': 'natural_feature'
  };

  return categoryMapping[category?.toLowerCase()] || 'tourist_attraction';
};

/**
 * T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm (Haversine formula) - tr·∫£ v·ªÅ m√©t
 */
const calculateDistance = (lat1, lon1, lat2, lon2) => {
  const R = 6371000; // B√°n k√≠nh Tr√°i ƒê·∫•t (m√©t)
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
};

export default {
  searchPlacesWithGoogleMaps,
  searchByCategory,
  searchNearLocation
};
